// -------------------------------------------------------------------
// –†–µ–∞–ª—ñ–∑—É–π—Ç–µ –∫–ª–∞—Å Student, —è–∫–∏–π —É—Å–ø–∞–¥–∫–æ–≤—É–≤–∞—Ç–∏–º–µ—Ç—å—Å—è –≤—ñ–¥ –∫–ª–∞—Å—É User. –¶–µ–π –∫–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ç–∞–∫—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ:
// name –ø—Ä–∏–≤–∞—Ç–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å (—ñ–º'—è, —É—Å–ø–∞–¥–∫–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥ User),
// surname –ø—Ä–∏–≤–∞—Ç–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å (–ø—Ä—ñ–∑–≤–∏—â–µ, —É—Å–ø–∞–¥–∫–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥ User),
// year (—Ä—ñ–∫ –≤—Å—Ç—É–ø—É –¥–æ –≤—É–∑—É).
// –ö–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –º–µ—Ç–æ–¥ getFullName() (—É—Å–ø–∞–¥–∫–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥ User), –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —è–∫–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —Å—Ç—É–¥–µ–Ω—Ç–∞.
// –¢–∞–∫–æ–∂ –∫–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –º–µ—Ç–æ–¥ getCourse(), —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç–∏–º–µ –ø–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ (–≤—ñ–¥ 1 –¥–æ 5, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–≤–∏—â—É—î 5  –∫—É—Ä—Å –≤–∏–≤–æ–¥–∏—Ç–∏ —â–æ —Å—Ç—É–¥–µ–Ω—Ç —è–≤–ª—è—î—Ç—Å—å—è –≤–∏–ø—É—Å–∫–Ω–∏–∫–æ–º).
// –ö—É—Ä—Å –æ–±—á–∏—Å–ª—é—î—Ç—å—Å—è —Ç–∞–∫: –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∫—É –≤—ñ–¥–Ω—è—Ç–∏ —Ä—ñ–∫ –≤—Å—Ç—É–ø—É –¥–æ –≤—É–∑—É. –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ (—á–∏—Ç–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é!!!).
// –ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å–∞:
// const student = new Student('–ü–µ—Ç—Ä–∏–∫', '–ü—è—Ç–æ—á–∫–∏–Ω', 2019);

// student.getFullName(); //–ø–æ–≤–µ—Ä–Ω–µ '–ü–µ—Ç—Ä–∏–∫ –ü—è—Ç–æ—á–∫–∏–Ω'
// student.getCourse();   //–ø–æ–≤–µ—Ä–Ω–µ 3 (—Ç—Ä–µ—Ç—ñ–π –∫—É—Ä—Å)










// const objA = {
//     name: 'objA',
//     sayHello() {
//         console.log(this.name);
//     }
// }

// const objB = Object.create(objA);
// objB.name = 'objB'
// console.log(objB);
// console.log(objB.name);
// objB.sayHello()
// console.log(objA.go());




const user = {
    name: 'user',
    email: 'test@gmail.com'
}


// const admin = Object.create(user);
// admin.root = true;

// const superAdmin = Object.create(admin)
// superAdmin.secretKey = 'qwerty';
// console.log(superAdmin);
// console.log(superAdmin.name);

// const customer = Object.create(user);
// customer.limit = 10000;



// class User {
//     static counter = 0;
//     static #addUser() {
//         this.counter += 1;
//     }
//     #email;
//     constructor(name, age, email = 'blabla') {
//         this.name = name;
//         this.age = age;
//         this.#email = email;
//         User.#addUser();
//     }

//     #checkAge() {
//         if (this.age >= 18) {
//             return true
//         }

//         return false
//     }

//     buy(product) {
//         if (!this.#checkAge()) {
//             alert('üòÇ')
//         }

//     }
//     get email() {
//         const pass = 'qwerty111';
//         const message = prompt(`${this.name} Enter secret key`)
//         if (pass === message) {
//             return this.#email
//         }
//         alert('GO HOME')
//     }

//     set email(newEmail) {
//         if (newEmail.includes('@gmail.com')) {
//             this.#email = newEmail;
//             return
//         }
//         alert('Must include @gmail.com')
//     }
// }

// class Human extends User {

//     constructor(name, age, email, hp, damage) {
//         super(name, age, email)
//         this.hp = hp;
//         this.damage = damage;
//     }

//     attack() {
//         console.log(`Attack with ${this.damage} damage`);
//     }
// }

// class Elf extends User {

//     constructor(name, age, email, hp, mana) {
//         super(name, age, email)
//         this.hp = hp;
//         this.mana = mana;
//     }

//     spell() {
//         console.log(`Attack with ${this.mana} mana`);
//     }
// }

// const artem = new Human('Artem', 14, 'test@gmail.com', 200, 20);
// artem.qwerty = false


// –ü–µ—Ä–µ—Ä–≤–∞ –¥–æ 21.25


















// Example 1 - –ë–ª–æ–≥–µ—Ä
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Blogger –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:

// email - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
// age - –≤—ñ–∫, —á–∏—Å–ª–æ
// numberOfPosts - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å–∏–≤ —Ç–µ–º –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä
// –ö–ª–∞—Å —á–µ–∫–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ getInfo(), —è–∫–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫: User ${–ø–æ—à—Ç–∞} is ${–≤—ñ–∫} years old and has ${–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤} posts.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ updatePostCount(value), —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ value –ø—Ä–∏–π–º–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.

// class User {
//     constructor({ name, age, numberOfPosts, topics }) {
//         this.name = name;
//         this.age = age;
//         this.numberOfPosts = numberOfPosts;
//         this.topics = topics;
//     }
//     getInfo() {
//         return `User ${this.name} is ${this.age} years old and has ${this.numberOfPosts} posts`
//     }
//     updatePostCount(value) {
//         if (typeof value === 'number' && !isNaN(value)) {
//             this.numberOfPosts += value;
//             return;
//         }

//         alert('Error.')
//     }
// }


// const mango = new User({
//     name: 'mango@mail.com',
//     age: 24,
//     numberOfPosts: 20,
//     topics: ['tech', 'cooking'],
// });
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
// mango.updatePostCount(5 + null);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts

// const poly = new User({
//   name: 'poly@mail.com',
//   age: 19,
//   numberOfPosts: 17,
//   topics: ['sports', 'gaming', 'health'],
// });
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
// poly.updatePostCount(4);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts



// Example 2 - –°—Ö–æ–≤–∏—â–µ
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Storage —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ –π–æ–≥–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:

// getItems() - –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤.
// addItem(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —ñ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö.
// removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö.

// class Storage {
//     constructor(products) {
//         this.items = products;
//     }

//     getItems() {
//         return this.items;
//     }

//     addItem(item) {
//         if (!this.items.includes(item)) {
//             this.items.push(item)
//         }
//     }

//     removeItem(item) {
//         const idx = this.items.indexOf(item);
//         // !! -> Boolean()
//         // ~  -(idx + 1) -1 => 0   - (0 + 1) => - 1
//         if (!!~idx) { //idx !== -1
//             this.items.splice(idx, 1)
//         }
//     }
// }
// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);

// const items = storage.getItems();
// console.table(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

// storage.addItem('üçå');
// storage.addItem('üçé');
// storage.addItem('üçå');
// console.table(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

// storage.removeItem('üçã');
// console.table(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]



// Example 3 - User
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å User —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login —Ç–∞ email. –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login —Ç–∞ #email, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç–µ—Ä —Ç–∞ —Å–µ—Ç–µ—Ä login —Ç–∞ email.
// class User {
//     #email;

//     constructor({ login, email }) {
//         this.#email = email;
//         this.login = login;
//     }
//     get email() {
//         return this.#email;
//     }
//     set email(newEmail) {
//         // condition
//         this.#email = newEmail;
//     }
//     get userLogin() {
//         return this.login
//     }
//     set userLogin(newLogin) {
//         // condition
//         this.login = newLogin;
//     }
// }
// const mango = new User({
//     login: 'Mango',
//     email: 'mango@dog.woof',
// });

// console.log(mango.userLogin); // Mango
// mango.userLogin = 'Mangodoge';
// console.log(mango.userLogin); // Mangodoge

// const poly = new User({
//   login: 'Poly',
//   email: 'poly@mail.com',
// });

// console.log(poly.login); // Poly
// poly.login = 'Polycutie';
// console.log(poly.login); // Polycutie



// Example 4 - –ù–æ—Ç–∞—Ç–∫–∏
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Notes —è–∫–∏–π –∫–µ—Ä—É—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ items. –ó–∞–º—ñ—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ text —Ç–∞ priority. –î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å Priority, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

// {
//   LOW: 'low',
//   NORMAL: 'normal',
//   HIGH: 'high'
// }
// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ addNote(note), removeNote(text) —Ç–∞ updatePriority(text, newPriority).
// class Notes {
//     static Priority = {
//         LOW: 'low',
//         NORMAL: 'normal',
//         HIGH: 'high'
//     }
//     constructor(arr) {
//         this.items = arr;
//     }
//     addNote(obj) {
//         const inNotes = this.items.some(({ text }) => text === obj.text);

//         if (!inNotes) {
//             this.items.push(obj);
//         }
//     }

//     removeNote(text) {
//         const idx = this.items.findIndex(({ text: noteText }) => text === noteText);

//         if (!!~idx) {
//             this.items.splice(idx, 1)
//         }
//     }

//     updateNote(text, newPriority) {
//         const idx = this.items.findIndex(({ text: noteText }) => text === noteText);

//         if (!!~idx) {
//             this.items[idx].priority = newPriority;
//         }
//     }
// }
// const myNotes = new Notes([]);

// myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.LOW });
// console.log(myNotes.items);

// myNotes.addNote({
//     text: '–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞',
//     priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items);

// myNotes.removeNote('–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞');
// // console.log(myNotes.items);

// myNotes.updateNote('–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞', Notes.Priority.HIGH);
// console.log(myNotes.items);


// Example 5 - Toggle
// –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å Toggle —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å {isOpen: boolean} —ñ –æ–≥–æ–ª–æ—à—É—î –æ–¥–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å on - —Å—Ç–∞–Ω –≤–∫–ª/–≤–∏–∫–ª (true/false). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ on –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ false.
// class Toggle {
//     constructor({ isOpen = false } = {}) {
//         this.on = !isOpen;
//     }
//     toggle() {
//         this.on = !this.on
//     }
// }
// const firstToggle = new Toggle({ isOpen: true });
// console.log(firstToggle);
// console.group('firstToggle');
// console.log(firstToggle.on);
// firstToggle.toggle();
// console.log(firstToggle.on);
// console.groupEnd('firstToggle');

// const secondToggle = new Toggle();
// console.log(secondToggle);
// console.group('secondToggle');
// console.log(secondToggle.on);
// secondToggle.toggle();
// console.log(secondToggle.on);
// console.groupEnd('secondToggle');










// –ß–∏ –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–Ω–≤–µ—Ä—Å—ñ—é –æ–¥—Ä–∞–∑—É –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ?







// class User {
//     #password;
//     constructor(pass) {
//         this.#password = pass;
//     }

//     get password() {
//         return this.#password;
//     }
// }

// !! => Boolean() !1 => false + ! => true

// -1 => true
// 0  => false
// ~ -(-1 + 1) => false
// ~ -(0 + 1) => true




































// artem.buy()
// const alex = new User('Alex', 28);
// artem.name = 'qwert'
// console.log(artem.name);
// console.log(artem.email);
// // artem.email = 'artemgmail.com';
// console.log(artem);
// console.log(alex);


//Get
// artem.name
// Set
// artem.email = 'artemgmail.com';
