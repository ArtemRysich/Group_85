// https://developer.mozilla.org/en-US/docs/Glossary/Hoisting
// Example 9  —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ + JS Docs

// const a = [1, 2, 3];
// const b = a;

// function foo() {
// console.log(arguments);
// }

// foo(1, 2, 3);
// foo(1, 2, 3, 4, 5);
// foo(1);



// function foo(a) {

// }

// foo(1)



// expression


// const foo = function (a, b, c) {
//     console.log('1', a);
//     console.log('2', b);
//     console.log('3', c);
// }
// console.log(foo(3, 2, 1));


//declaration

// function foo(a, b, c) {
//     console.log('1', a);
//     console.log('2', b);
//     console.log('3', c);
// }

// console.log(foo(3, 2, 1));





/** */

/**  - –≤–∏–∫–ª–∏–∫ JS DOCK comment - –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü—ñ—î—é (–ø—Ä–æ–ø–∏—Å—É–∂—Ç—å—Å—è –ª–∏—à–µ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó)

/**
 * Add value
 * @param {Number} a
 * @param {Number} b
 * @param {Number} c
 * @returns {Number} Summ
 */
function add(a, b, c) {
    const maxValue = 10;
    const summ = a + b + c;
    let message;

    if (summ > maxValue) {
        message = '–ë—ñ–ª—å—à–µ'
    } else {
        message = '–ú–µ–Ω—å—à–µ'
    }

    return message;
}

// console.log('3, 2, 1', add(3, 2, 1));
// console.log('32, 1, 5', add(32, 1, 5));

// –ü–∞—Ç–µ—Ä–Ω –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
// function add(a, b, c) {
//     const maxValue = 10;
//     const summ = a + b + c;

//     if (summ > maxValue) {
//         return '–ë—ñ–ª—å—à–µ'
//     }

//     return '–ú–µ–Ω—å—à–µ';
// }
// console.log(add(3, 2, 1));
// console.log('3, 2, 1', add(3, 2, 1));
// console.log('32, 1, 5', add(32, 1, 5));





// function foo() {
// for (let i = 0; i < arguments.length; i += 1) {
//     console.log(arguments[i]);
// }
// console.log(arguments);
// for(const arg of arguments){
//     console.log(arg);
// }
// console.log(arguments);
// for (let i = 0; i < arguments.length; i += 1) {
//     console.log(arguments[i]);
// }
// const arr = Array.from(arguments);
// console.log(arr);
// const arr = [...arguments]
// console.log(typeof arguments);
// console.log(Array.isArray(arguments));
// console.log(typeof arr);
// console.log(Array.isArray(arr));
// }

// foo(1, 2, 3);
// foo(1, 2, 3, 4, 5);
// foo(false);


// function add(a = 0, b = 0, c = 0) {
//     console.log('c', c);
//     console.log('b', b);
//     console.log('a', a);
//     return a + b + c
// }

// console.log(add(1, 2, 3));
// console.log(add(1, 2));
// console.log(add(1));
// console.log(add());


// –ü–µ—Ä–µ—Ä–≤–∞ –¥–æ 21.15





// if (true) {
//     var example = 1;
// }
// v


// function foo(){
//     var example = 1;
// }
// foo()
// console.log(example);



// const example = 1;

// let b = 3;
// function foo(a) {
//     console.log('a', a);
//     a = 99;
//     console.log('a', a);
//     // a = 12
//     // const example = 2;
//     // console.log(example);
//     // console.log(a);
// }
// foo(b)
// console.log('b',b);
// console.log(a);
// console.log(example);


// const b = [1, 2, 3];
// function foo(a) {
//     // a = Array.from(a)
//     // a = [...a];
//     console.log('a', a);
//     a.splice(1, 1)
//     // 

//     console.log('a', a);
//     console.log(a === b);
// }
// foo(b)
// console.log('b', b);


// function showResult(a, b, c) {
//     const maxValue = 10;


//     if (add(a, b, c) > maxValue) {
//         return '–ë—ñ–ª—å—à–µ'
//     }

//     return '–ú–µ–Ω—à–µ';
// }


// function add(a, b, c) {
//     return a + b + c;
// }


// console.log(showResult(11, 3, 4));





// Example 1 - –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calcBMI(weight, height) —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏.–î–ª—è —Ü—å–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –≤–∏—Å–æ—Ç–∏ –ª—é–¥–∏–Ω–∏ –≤ –º–µ—Ç—Ä–∞—Ö.

// –í–∞–≥–∞ —Ç–∞ –≤–∏—Å–æ—Ç–∞ –±—É–¥—É—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —è–∫ —Ä—è–¥–∫–∏.–ù–µ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ 24.7 –∞–±–æ 24, 7, —Ç–æ–±—Ç–æ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–º–∞.

// –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –æ–¥–Ω—ñ—î—ó —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏;


/**
 * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏
 * @param {String} weight –≤–∞–≥–∞ –æ—Å–æ–±–∏
 * @param {String} height –∑—Ä—ñ—Å—Ç –æ—Å–æ–±–∏
 * @returns {Number} —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏
 */
function calcBMI(weight, height) {
    weight = Number(weight.replace(',', '.'))
    height = Number(height.replace(',', '.'))

    return Number((weight / height ** 2).toFixed(1));
}

// const bmi = calcBMI('88,3', '1.75');
// const bmi2 = calcBMI('88.3', '1,75');
// console.log(bmi); // 28.8












// Example 2 - –ù–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é min(a, b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a —Ç–∞ b.


// function min(a, b) {
//     let minValue;

//     if (a > b) {
//         minValue = b;
//     } else {
//         minValue = a;
//     }

//     return minValue
// }


/**
 * –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª
 * @param {Number} a
 * @param {Number} b
 * @returns {Number || String} –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–ª–æ || –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
 */
function min(a, b) {
    if (a > b) {
        return b;
    }

    return a
}


// function min(a, b) {
//     return a > b ? b : a;
// }

// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1




// Example 3 - –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dimensions —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞.–ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.



/**
 * O–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
 * @param {String} dimensions
 * @returns {Number}
 */
function getPerimeter(dimensions) {
    dimensions = dimensions.split(' ')
    return 2 * (Number(dimensions[0]) + Number(dimensions[1]))
}
// console.log(getPerimeter('8 11'));


/**
 * O–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
 * @param {String} dimensions
 * @returns {Number}
 */
function getRectArea(dimensions) {
    dimensions = dimensions.split(' ')
    console.log(dimensions);
    return Number(dimensions[0]) * Number(dimensions[1]);
}

// console.log(getRectArea('8 11'));













// Example 4 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª for, —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ < –Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞ > - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

//     –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É ['Mango', 'Poly', 'Ajax'] –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ 1 - Mango, –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 –≤–∏–≤–µ–¥–µ 3 - Ajax.



/**
 * –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param {Array} items
 */
function logItems(items) {
    // –Ø–∫—â–æ –¥–≤—ñ—á—ñ —Ç–∞ –±—ñ–ª—å—à–µ –∫–æ–º–ø–µ–Ω—Å—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    // for (let i = 0, j = 1; i < items.length; i += 1, j += 1) {
    //     console.log(`${j} - ${items[i]}`);
    // }

    // –Ø–∫—â–æ 1 —Ä–∞–∑ –∫–æ–º–ø–µ–Ω—Å—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    for (let i = 0; i < items.length; i += 1) {
        console.log(`${i + 1} - ${items[i]}`);
    }
}

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);


//     Example 6 - –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
//     –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLargestNumber(numbers)—è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.

//     function findLargestNumber(numbers) { }

//     console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
//     console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83













//     Example 7 - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
//     –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calAverage() —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è. –£—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å –ª–∏—à–µ —á–∏—Å–ª–∞–º–∏.

// function calAverage() {
//     let total = 0;

//     for (const num of arguments) {
//         total += num;
//     }

//     return total / arguments.length
// }

// function calAverage() {
//     const arr = Array.from(arguments);
//     let total = 0;

//     for (const num of arr) {
//         total += num;
//     }

//     return total / arr.length
// }


// console.log(calAverage(1, 2, 3, 4)); // 2.5
// console.log(calAverage(14, 8, 2)); // 8
// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2











//     Example 8 - –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
//     –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é formatTime(minutes) —è–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è minutes (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω) —É —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–¥–∏–Ω —Ç–∞ —Ö–≤–∏–ª–∏–Ω HH:MM.


// function formatTime(minutes) {
// const hours =  Math.floor(minutes / 60);
// const min = minutes % 60;
// return `${hours.toString().padStart(2,'0')} : ${min.toString().padStart(2,'0')}`
// }

// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01"












//     Example 9 - –ö–æ–ª–µ–∫—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ (includes, indexOf, push —ñ —Ç. –¥.)
//     –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ courses:

//     addCourse(name) - –¥–æ–¥–∞—î –∫—É—Ä—Å –¥–æ –∫—ñ–Ω—Ü—è –∫–æ–ª–µ–∫—Ü—ñ—ó
//     removeCourse(name) - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
//     updateCourse(oldName, newName) - –∑–º—ñ–Ω—é—î —ñ–º'—è –Ω–∞ –Ω–æ–≤–µ
//     const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];

//     addCourse('Express');
//     console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
//     addCourse('CSS'); // '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å'

//     removeCourse('React');
//     console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
//     removeCourse('Vue'); // '–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'

//     updateCourse('Express', 'NestJS');
//     console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']





// const langs = ["python", "javascript", "c++", "haskel", "php", "ruby"];

// const result = [];

// for (let i = 0; i < langs.length; i += 1) {
//     let max = langs[i];

//     if (result.includes(langs[i])) {
//         continue;
//     }

//     // let max = result.includes(langs[i]) ? 'z' : langs[i];
//     for (let j = 0; j < langs.length; j += 1) {
//         if (max > langs[j] && !result.includes(langs[j])) {
//             max = langs[j];
//             i = -1
//         }
//     }
//     result.push(max)
// }
// console.log('Result: ', result);



// for (let i = 0; i < langs.length; i += 1) {
//     let max = langs[i];
//     for (let j = i; j < langs.length; j += 1) {
//         if (max > langs[j]) {
//             max = langs[j];
//         }
//     }
//     i = -1;
//     langs.splice(langs.indexOf(max), 1);
//     result.push(max);
// }
// console.log('result:', result);

// (—ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É langs):

// const result = [];

// console.log('start', langs);
// let total = 0
// for (let i = 0; i < langs.length; i += 1) {
//     let max = langs[i];
//     for (let j = 0; j < langs.length; j += 1) {
//         if (max > langs[j] && !result.includes(langs[j])) {
//             max = langs[j];
//             i = -1;
//         }
//         total += 1
//     }
//     if (!result.includes(max)) {
//         result.push(max);
//     }
// }
// console.log('start', langs);
// console.log('result', result);
// console.log(total);

const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// let total = 0;
// for (let i = 0; i < langs.length - 1; i += 1) {
//     for (let j = i + 1; j < langs.length; j += 1) {
//         if (langs[i] > langs[j]) {
//             let temp = langs[i];
//             langs[i] = langs[j];
//             langs[j] = temp;
//         }
//         total += 1
//     }
// }
// console.log(total);
// console.log(langs);
// const result = []
// let total = 0
// for (let i = 0; i < langs.length; i++) {
//     let addResult = false;

//     for (let j = 0; j < result.length; j++) {
//         if (langs[i] < result[j]) {
//             result.splice(j, 0, langs[i]);
//             addResult = true;
//             total += 1
//             break;
//         }
//         total += 1
//     }
//     if (!addResult) {
//         result.push(langs[i]);
//     }
// }
// console.log(result);
// console.log(total);

// for (let i = 0; i < langs.length; i += 1) {
//     let max = langs[i];
//     let indexToDelete = i;
//     for (let j = i; j < langs.length; j += 1) {
//         if (langs[j] > max) {
//             max = langs[j];
//             indexToDelete = j;
//         }
//         total += 1;
//     }
//     langs.splice(indexToDelete, 1);
//     langs.unshift(max);
// }


// function indexOf(arr, ele) {
//     for (let i = 0; i < arr.length; i += 1) {
//         if (arr[i] === ele) {
//             return i
//         }
//     }
//     return -1
// }




